loading graph
n: 7
starting lipton tarjan...
[32m---------------------------- 1 - Check Planarity  ------------
[0mplanar ok
[32m---------------------------- 2 - Connected Components --------
[0m# of components: 1
too big
biggest component: 0
[32m---------------------------- 3 - BFS and Levels ------------
[0m  tree edge 0, 1
  tree edge 0, 6
  tree edge 0, 5
  tree edge 1, 4
  tree edge 1, 3
  tree edge 6, 2
[32m---------------------------- 4 - l1 and k  ------------
[0mk:  4      # of verts in levels 0 thru l1
l1: 1      total cost of levels 0 thru l1 barely exceeds 1/2
[32m---------------------------- 5 - Find More Levels -------
[0msq:    4
snk:   3.4641
l0: 1     highest level <= l1
l2: 2     lowest  level >= l1 + 1
[32m---------------------------- 6 - Shrinktree -------------
[0mn: 7
killing vertex 2
killing vertex 3
killing vertex 4
testing is tree edge 0, 5
src: 0
tar: 5
testing is tree edge 0, 6
src: 0
tar: 6
testing is tree edge 0, 1
src: 0
tar: 1
testing is tree edge 0, 1
src: 0
tar: 1
testing is tree edge 0, 5
src: 0
tar: 5
testing is tree edge 0, 6
src: 0
tar: 6
finishing
edges to add size: 0
adding: 
edges to remove size: 0
removing: 
no edges to x found, deleting
killing vertex 999999
x_gone: 0
[32m-------------------- 7 - New BFS and Make Max Planar -----
[0mroot: 0
n:    4
  tree edge 0, 1
  tree edge 0, 6
  tree edge 0, 5
[31m
**********************  Graph  **************************
vert 0   hos edges 1 6 5 
vert 1   hos edges 0 6 5 
vert 5   hos edges 0 6 1 
vert 6   hos edges 0 5 1 
*********************************************************

[0m[32m----------------------- 8 - Locate Cycle -----------------
[0mtesting is tree edge 0, 1
src: 0
tar: 1
testing is tree edge 6, 0
src: 6
tar: 0
testing is tree edge 0, 5
src: 0
tar: 5
testing is tree edge 6, 5
src: 6
tar: 5
testing is tree edge 6, 5
src: 6
tar: 5
arbitrarily choosing nontree edge: 6, 5
ancestors v1...
first v: 6
root: 0
pushing back v: 0
ancestors v2...
first v: 5
root: 0
pushing back v: 0
common ancestor: 0
   scanning cycle vert 6
testing is tree edge 6, 0
src: 6
tar: 0
testing is tree edge 6, 5
src: 6
tar: 5
testing is tree edge 6, 1
src: 6
tar: 1
   scanning cycle vert 0
testing is tree edge 0, 1
src: 0
tar: 1
testing is tree edge 0, 1
src: 0
tar: 1
      scanning incident tree edge 0, 1   cost: 1
cycle: 6 0 5 
      testing if edge 0, 1 is inside the cycle:       common_vert:    0

      it:     0
      v:      0
      before: 6
      after:  5
      other:  1
pushback1
pushback3
pushback2
      NO
testing is tree edge 0, 6
src: 0
tar: 6
testing is tree edge 0, 5
src: 0
tar: 5
   scanning cycle vert 5
testing is tree edge 5, 0
src: 5
tar: 0
testing is tree edge 5, 6
src: 5
tar: 6
testing is tree edge 5, 1
src: 5
tar: 1
!!!!!! cost swapped !!!!!!!!
total inside cost:  1
total outside cost: 0
[32m---------------------------- 9 - Improve Separator -----------
[0m[31m
**********************  Edges  **************************
0, 1
6, 0
0, 5
6, 5
1, 6
1, 5
*********************************************************

[0mchosen_edge: 6, 5
const inside: 1
found cycle with inside cost < 2/3: 1
cycle verts: 6 0 5 
[32m
------------ 10  - Construct Vertex Partition --------------
[0m