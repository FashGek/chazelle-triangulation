loading graph
n: 7
starting lipton tarjan...
---------------------------- 1 - Check Planarity  ------------
planar ok
---------------------------- 2 - Connected Components --------
# of components: 1
---------------------------- 3 - BFS and Levels ------------
  tree edge 0, 1     vertex/descendant cost: 1/1   0/1   
  tree edge 0, 3     vertex/descendant cost: 3/1   0/2   
  tree edge 0, 4     vertex/descendant cost: 4/1   0/3   
  tree edge 1, 2     vertex/descendant cost: 2/1   1/2   0/4   
  tree edge 1, 5     vertex/descendant cost: 5/1   1/3   0/5   
  tree edge 1, 6     vertex/descendant cost: 6/1   1/4   0/6   
level/cost of vert 0: 0
level/cost of vert 1: 1
level/cost of vert 2: 2
level/cost of vert 3: 1
level/cost of vert 4: 1
level/cost of vert 5: 2
level/cost of vert 6: 2
L[0]: 1
L[1]: 3
L[2]: 3
L[3]: 0
---------------------------- 4 - l1 and k  ------------
k:  4      # of verts in levels 0 thru l1
l1: 1      total cost of levels 0 thru l1 barely exceeds 1/2
---------------------------- 5 - Find More Levels -------
sq:    4
snk:   3.4641
l0: 1     highest level <= l1
l2: 2     lowest  level >= l1 + 1
---------------------------- 6 - Shrinktree -------------
n: 7
deleting vertex 2 of level l2 2 >= 2
deleting vertex 5 of level l2 2 >= 2
deleting vertex 6 of level l2 2 >= 2
vertex 0 at level 0 is TRUE
vertex 1 at level 1 is TRUE
vertex 3 at level 1 is TRUE
vertex 4 at level 1 is TRUE
vertex 999999 at level 2 is FALSE
foundedge 1, 3
     going to delete 1, 3
foundedge 1, 4
     going to delete 1, 4
foundedge 3, 4
     going to delete 3, 4
foundedge 3, 1
     going to delete 3, 1
foundedge 4, 1
     going to delete 4, 1
foundedge 4, 3
     going to delete 4, 3
finishing
edges to add size: 0
adding: 
edges to remove size: 6
removing: (1, 3)   (1, 4)   (3, 1)   (3, 4)   (4, 1)   (4, 3)   
no edges to x found, deleting
x_gone: 0
-------------------- 7 - New BFS and Make Max Planar -----
root: 0
  tree edge 0, 1     vertex/descendant cost: 1/1   0/2   
  tree edge 0, 3     vertex/descendant cost: 3/1   0/3   
  tree edge 0, 4     vertex/descendant cost: 4/1   0/4   
----------------------- 8 - Locate Cycle -----------------

**********************  Graph  **************************
vert 0   hos edges 1 3 4 
vert 1   hos edges 0 3 4 
vert 3   hos edges 0 4 1 
vert 4   hos edges 0 3 1 
*********************************************************

arbitrarily choosing nontree edge: 3, 4
common ancestor: 0
cycle verts: 3 0 4 
   scanning cycle vert 3
   scanning cycle vert 0
      scanning incident tree edge 0, 1   cost: 1
        testing if edge 0, 1 is inside the cycle: NO
   scanning cycle vert 4
!!!!!! cost swapped !!!!!!!!
total inside cost:  1
total outside cost: 0
---------------------------- 9 - Improve Separator -----------
found cycle with inside cost < 2/3: 1

------------ 10  - Construct Vertex Partition --------------
