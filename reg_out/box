loading graph
n: 13
starting lipton tarjan...
[32m---------------------------- 1 - Check Planarity  ------------
[0mplanar ok
[32m---------------------------- 2 - Connected Components --------
[0m# of components: 1
too big
biggest component: 0
[32m---------------------------- 3 - BFS and Levels ------------
[0m  tree edge 0, 1
  tree edge 0, 2
  tree edge 0, 3
  tree edge 0, 4
  tree edge 1, 5
  tree edge 1, 6
  tree edge 1, 7
  tree edge 2, 8
  tree edge 2, 9
  tree edge 3, 10
  tree edge 8, 11
  tree edge 11, 12
[32m---------------------------- 4 - l1 and k  ------------
[0mk:  11      # of verts in levels 0 thru l1
l1: 2      total cost of levels 0 thru l1 barely exceeds 1/2
[32m---------------------------- 5 - Find More Levels -------
[0msq:    6.63325
snk:   2.82843
l0: 2     highest level <= l1
l2: 3     lowest  level >= l1 + 1
[32m---------------------------- 6 - Shrinktree -------------
[0mn: 13
killing vertex 11
killing vertex 12
foundedge 1, 2     going to delete 1, 2
foundedge 1, 4     going to delete 1, 4
foundedge 5, 6     going to delete 5, 6
foundedge 5, 4     going to delete 5, 4
foundedge 6, 7     going to delete 6, 7
foundedge 6, 5     going to delete 6, 5
foundedge 7, 2     going to delete 7, 2
foundedge 7, 6     going to delete 7, 6
foundedge 2, 3     going to delete 2, 3
foundedge 2, 7     going to delete 2, 7
foundedge 2, 1     going to delete 2, 1
foundedge 9, 3     going to delete 9, 3
foundedge 3, 4     going to delete 3, 4
foundedge 3, 9     going to delete 3, 9
foundedge 3, 2     going to delete 3, 2
foundedge 10, 4     going to delete 10, 4
foundedge 4, 1     going to delete 4, 1
foundedge 4, 5     going to delete 4, 5
foundedge 4, 10     going to delete 4, 10
foundedge 4, 3     going to delete 4, 3
finishing
edges to add size: 0
adding: 
edges to remove size: 20
removing: (1, 2)   (1, 4)   (2, 1)   (2, 3)   (2, 7)   (3, 2)   (3, 4)   (3, 9)   (4, 1)   (4, 3)   (4, 5)   (4, 10)   (5, 4)   (5, 6)   (6, 5)   (6, 7)   (7, 2)   (7, 6)   (9, 3)   (10, 4)   
no edges to x found, deleting
killing vertex 999999
x_gone: 0
[32m-------------------- 7 - New BFS and Make Max Planar -----
[0mroot: 0
n:    11
  tree edge 0, 1
  tree edge 0, 2
  tree edge 0, 3
  tree edge 0, 4
  tree edge 1, 5
  tree edge 1, 6
  tree edge 1, 7
  tree edge 2, 8
  tree edge 2, 9
  tree edge 3, 10
[31m
**********************  Graph  **************************
vert 0   hos edges 1 2 3 4 5 8 10 7 9 
vert 1   hos edges 0 5 6 7 2 4 
vert 2   hos edges 0 8 9 3 1 4 5 
vert 3   hos edges 0 10 4 2 8 
vert 4   hos edges 0 3 1 2 10 
vert 5   hos edges 1 6 0 7 2 
vert 6   hos edges 1 7 5 
vert 7   hos edges 1 6 0 5 
vert 8   hos edges 2 9 0 3 
vert 9   hos edges 2 8 0 
vert 10   hos edges 3 0 4 
*********************************************************

[0m[32m----------------------- 8 - Locate Cycle -----------------
[0marbitrarily choosing nontree edge: 6, 7
ancestors v1...
first v: 6
root: 0
pushing back v: 1
pushing back v: 0
ancestors v2...
first v: 7
root: 0
pushing back v: 1
pushing back v: 0
common ancestor: 1
   scanning cycle vert 6
   scanning cycle vert 1
      scanning incident tree edge 1, 0   cost: 7
cycle: 6
cycle: 1
cycle: 7
      here i am
      src: 1
      tar: 0
      v:   1
      testing if edge 1, 0 is inside the cycle: 
      it:     1
      v:      1
      before: 6
      after:  7
      other:  0
      YES
      scanning incident tree edge 1, 5   cost: 1
cycle: 6
cycle: 1
cycle: 7
      here i am
      src: 1
      tar: 5
      v:   1
      testing if edge 1, 5 is inside the cycle: 
      it:     1
      v:      1
      before: 6
      after:  7
      other:  5
      YES
   scanning cycle vert 7
total inside cost:  8
total outside cost: 0
[32m---------------------------- 9 - Improve Separator -----------
[0mchosen_edge: 6, 7
looking for a better cycle
   vi: 6
   wi: 7
      vertex 6 has neighbor 1
      vertex 6 has neighbor 7
      vertex 6 has neighbor 5
      vertex 7 has neighbor 1
      vertex 7 has neighbor 6
      vertex 7 has neighbor 0
      vertex 7 has neighbor 5
      set intersection: 1
      set intersection: 5
   intersecti: 1
   intersecti: 5
   edge_inside y
   intersectbegin: 1
cycle: 6
cycle: 1
cycle: 7
      here i am
      src: 6
      tar: 7
      v:   1
      testing if edge 6, 7 is inside the cycle: 
      it:     1
      v:      1
      before: 6
      after:  7
      other:  6
